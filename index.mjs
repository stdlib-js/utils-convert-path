// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import{isPrimitive as e}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string@v0.1.1-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/regexp-extended-length-path@v0.1.1-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/string-base-lowercase@v0.2.1-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/string-replace@v0.1.1-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";var i=/^([A-Za-z]):[\\\/]+/,d=/^\/([A-Za-z])\//;function a(a,m){var o,l,g;if(!e(a))throw new TypeError(s("invalid argument. First argument must be a string. Value: `%s`.",a));if(!e(m))throw new TypeError(s("invalid argument. Second argument must be a string. Value: `%s`.",m));if("win32"!==m&&"mixed"!==m&&"posix"!==m)throw new Error(s("invalid argument. Second argument must be a recognized output path convention. Value: `%s`.",m));if(g=a,"win32"===m)return(l=d.exec(g))&&(o=l[1]+":\\",g=n(g,d,o)),n(g,"/","\\");if(t.REGEXP.test(a))throw new Error(s("invalid argument. Cannot convert Windows extended-length paths to POSIX paths. Value: `%s`.",a));return"mixed"===m?((l=d.exec(g))?(o=l[1]+":/",g=n(g,d,o)):(l=i.exec(g))&&(o=l[1]+":/",g=n(g,i,o)),n(g,"\\","/")):((l=i.exec(g))&&(o="/"+r(l[1])+"/",g=n(g,i,o)),n(g,"\\","/"))}export{a as default};
//# sourceMappingURL=index.mjs.map
