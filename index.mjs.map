{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport reExtendedLengthPath from '@stdlib/regexp-extended-length-path';\nimport lowercase from '@stdlib/string-base-lowercase';\nimport replace from '@stdlib/string-replace';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar RE_WIN_DEVICE_ROOT = /^([A-Za-z]):[\\\\\\/]+/; // eslint-disable-line no-useless-escape\nvar RE_POSIX_DEVICE_ROOT =/^\\/([A-Za-z])\\//;\n\n\n// MAIN //\n\n/**\n* Converts between POSIX and Windows paths.\n*\n* @param {string} from - path to convert\n* @param {string} to - output path convention\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a string\n* @throws {RangeError} second argument must be a recognized output path convention\n* @throws {Error} cannot convert a Windows extended-length path to a non-Windows path convention\n* @returns {string} converted path\n*\n* @example\n* var p = convertPath( '/c/foo/bar/beep.c', 'win32' );\n* // returns 'c:\\foo\\bar\\beep.c'\n*\n* @example\n* var p = convertPath( '/c/foo/bar/beep.c', 'mixed' );\n* // returns 'c:/foo/bar/beep.c'\n*\n* @example\n* var p = convertPath( 'C:\\\\foo\\\\bar\\\\beep.c', 'posix' );\n* // returns '/c/foo/bar/beep.c'\n*\n* @example\n* var p = convertPath( 'C:\\\\foo\\\\bar\\\\beep.c', 'mixed' );\n* // returns 'C:/foo/bar/beep.c'\n*/\nfunction convertPath( from, to ) {\n\tvar device;\n\tvar parts;\n\tvar out;\n\tif ( !isString( from ) ) {\n\t\tthrow new TypeError( format( '1SH3F,Ex', from ) );\n\t}\n\tif ( !isString( to ) ) {\n\t\tthrow new TypeError( format( '1SH39,Ey', to ) );\n\t}\n\tif (\n\t\tto !== 'win32' &&\n\t\tto !== 'mixed' &&\n\t\tto !== 'posix'\n\t) {\n\t\tthrow new Error( format( '1SHAx,Oi', to ) );\n\t}\n\tout = from;\n\n\t// Convert to a Windows path convention by transforming a POSIX device root (if present) and using a Windows path separator...\n\tif ( to === 'win32' ) {\n\t\tparts = RE_POSIX_DEVICE_ROOT.exec( out );\n\t\tif ( parts ) {\n\t\t\tdevice = parts[ 1 ]+':\\\\';\n\t\t\tout = replace( out, RE_POSIX_DEVICE_ROOT, device );\n\t\t}\n\t\treturn replace( out, '/', '\\\\' );\n\t}\n\t// Check for Windows extended-length paths...\n\tif ( reExtendedLengthPath.REGEXP.test( from ) ) {\n\t\tthrow new Error( format( '1SHAy,Oj', from ) );\n\t}\n\t// Convert to a mixed path convention by combining a Windows drive letter convention with a POSIX path separator...\n\tif ( to === 'mixed' ) {\n\t\tparts = RE_POSIX_DEVICE_ROOT.exec( out );\n\t\tif ( parts ) {\n\t\t\tdevice = parts[ 1 ]+':/';\n\t\t\tout = replace( out, RE_POSIX_DEVICE_ROOT, device );\n\t\t} else {\n\t\t\tparts = RE_WIN_DEVICE_ROOT.exec( out );\n\t\t\tif ( parts ) {\n\t\t\t\tdevice = parts[ 1 ]+':/';\n\t\t\t\tout = replace( out, RE_WIN_DEVICE_ROOT, device );\n\t\t\t}\n\t\t}\n\t\treturn replace( out, '\\\\', '/' );\n\t}\n\t// Convert to a POSIX path convention by transforming a Windows device root (if present) and using a POSIX path separator...\n\tparts = RE_WIN_DEVICE_ROOT.exec( out );\n\tif ( parts ) {\n\t\tdevice = '/'+lowercase( parts[ 1 ] )+'/';\n\t\tout = replace( out, RE_WIN_DEVICE_ROOT, device );\n\t}\n\treturn replace( out, '\\\\', '/' );\n}\n\n\n// EXPORTS //\n\nexport default convertPath;\n"],"names":["RE_WIN_DEVICE_ROOT","RE_POSIX_DEVICE_ROOT","convertPath","from","to","device","parts","out","isString","TypeError","format","Error","exec","replace","reExtendedLengthPath","REGEXP","test","lowercase"],"mappings":";;meA+BA,IAAIA,EAAqB,sBACrBC,EAAsB,kBAgC1B,SAASC,EAAaC,EAAMC,GAC3B,IAAIC,EACAC,EACAC,EACJ,IAAMC,EAAUL,GACf,MAAM,IAAIM,UAAWC,EAAQ,WAAYP,IAE1C,IAAMK,EAAUJ,GACf,MAAM,IAAIK,UAAWC,EAAQ,WAAYN,IAE1C,GACQ,UAAPA,GACO,UAAPA,GACO,UAAPA,EAEA,MAAM,IAAIO,MAAOD,EAAQ,WAAYN,IAKtC,GAHAG,EAAMJ,EAGM,UAAPC,EAMJ,OALAE,EAAQL,EAAqBW,KAAML,MAElCF,EAASC,EAAO,GAAI,MACpBC,EAAMM,EAASN,EAAKN,EAAsBI,IAEpCQ,EAASN,EAAK,IAAK,MAG3B,GAAKO,EAAqBC,OAAOC,KAAMb,GACtC,MAAM,IAAIQ,MAAOD,EAAQ,WAAYP,IAGtC,MAAY,UAAPC,IACJE,EAAQL,EAAqBW,KAAML,KAElCF,EAASC,EAAO,GAAI,KACpBC,EAAMM,EAASN,EAAKN,EAAsBI,KAE1CC,EAAQN,EAAmBY,KAAML,MAEhCF,EAASC,EAAO,GAAI,KACpBC,EAAMM,EAASN,EAAKP,EAAoBK,IAGnCQ,EAASN,EAAK,KAAM,QAG5BD,EAAQN,EAAmBY,KAAML,MAEhCF,EAAS,IAAIY,EAAWX,EAAO,IAAM,IACrCC,EAAMM,EAASN,EAAKP,EAAoBK,IAElCQ,EAASN,EAAK,KAAM,KAC5B"}